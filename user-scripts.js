const { head } = require("../server/controllers/usercontroller");

/* *************************
*** USER SIGNUP ***
************************** */
function userSignUp() {
    // console.log('userSignUp Function Called')
    let userEmail = document.getElementById('emailSignup').value;
    let userPass = document.getElementById('pwdSignup').value;
    let newUserData = { user: { email: userEmail, password: userPass } };
    console.log(`NEWUSERDATA ==> ${newUserData.user.email} ${newUserData.user.password}`)


    fetch('http://localhost:3000/user/create', { //fetching from the user create endpoint that we created in the server
        method: 'POST', //using the POST method just as we did for this end point server side - server route and method type must match
        headers: {
            'Content-Type': 'application/json' //dealing with JSON text content
        },
        body: JSON.stringify(newUserData) //newUserData turned into a JSON string

    })
    .then(response => response.json()) //parses the response into JSON
    .then(function (response) { //console logging the sessionToken and then creating the variable "token" to store it
        console.log(response.sessionToken);
        let token = response.sessionToken;
        localStorage.setItem('SessionToken', token); //access the localStorage for the current domain we are using and use the setItem method to set the SessionToken in local storage to be the token generated by our server
        tokenChecker() //calling the tokenChecker function 
    })
    .catch((err) => { //handles any errors and console logging them
        console.log(err)
    })
    }
    
    /* *************************
    *** USER LOGIN ***
    ************************** */
    function userLogin() {
    //â€ƒconsole.log('userLogin Function Called')
    let userEmail = document.getElementById('emailLogin').value;
    let userPass = document.getElementById('pwdLogin').value;
    console.log(userEmail, userPass);

    let userData = { user: { email: userEmail, password: userPass } };
    console.log(`USERDATA ==> ${userData.user.email} ${userData.user.password}`)

    fetch('http://localhost:3000/user/login', { 
        method: 'POST',
        headers: {
            'Content-Type': 'application/json' //dealing with JSON text content
        },
        body: JSON.stringify(userData) //newUserData turned into a JSON string

    })
    .then(response => response.json()) //parses the response into JSON
    .then(function (response) { //console logging the sessionToken and then creating the variable "token" to store it
        console.log(response.sessionToken);
        let token = response.sessionToken;
        localStorage.setItem('SessionToken', token); //access the localStorage for the current domain we are using and use the setItem method to set the SessionToken in local storage to be the token generated by our server
        tokenChecker() //calling the tokenChecker function 
    })
    .catch((err) => { //handles any errors and console logging them
        console.log(err)
    })
    }
    
    /* *************************
    *** USER LOGOUT ***
    ************************** */
    function userLogout() {
        localStorage.setItem('SessionToken', undefined) //setting the sessionToken to undefined, meaning the user will no longer be able to access any protected routes
        console.log(`sessionToken ==> ${localStorage.sessionToken}`)
        tokenChecker()
    }
    
    /* *************************
     *** TOKEN CHECKER FUNCTION ***
    ************************** */
function tokenChecker() {

    let display = document.getElementById('journals') //defining a few variables to interact with the DOM more easily
    let header = document.createElement('h5')
    let accessToken = localStorage.getItem('SessionToken')
    let text = 'Login or signup to get started!'
    
    for (i = 0; i = display.childNodes.length; i++) { //add a for loop that removes all child nodes within the journals div to prevent the message we may want to display to get appended to the end of a bunch of journal cards
        display.removeChild(display.firstChild)
    }

    if (accessToken === 'undefined') { //using a conditional to check whether or not there is a token, if there is not a token we add a header with the message contained within the "text" variable on line 83. This means there is not a user signed in so we want to make sure we are communicating that with them. If there is a token then we do not append anything to the DOM.
        display.appendChild(header);
        header.textContent = text
        header.setAttribute('id', 'defaultLogin');
    } else {
        null
    }

}
tokenChecker() //finally we call the tokenChecker function. we want to call it right away so as soon as the browser goes to the Journal webpage it checks if there is a token in local storage or not and displays the message accordingly